title = Sudoku Solver

solution-0 = Unsolvable!
solution-1 = Solution
solution-2 = Solution (not unique)

no-training-data = No training data available yet
train-add = Use data for training

page-start = Sudoku Solver
page-training = Training Data
page-error = Error
page-camera = Capture
page-debug = Recognize
page-edit = Edit

button-edit = Start with empty Sudoku
button-retry = Reload previous Sudoku
button-camera = Capture Sudoku with camera
button-photo = Recognize Sudoku on image
button-test-image = Use test image
button-training = Show training data
button-debug-on = Restart in developer mode
button-debug-off = Restart in normal mode
button-training-clear = Clear data
button-training-done = Done
button-error-done = OK
button-ocr = Recognize Sudoku
button-debug = Recognize Sudoku while explaining the steps
button-debug-done = Done
button-solve = Solve

duration-table = Durations
duration-table-event = Action
duration-table-duration = duration (ms)
duration-table-read-data = read image data
duration-table-gray = convert to gray
duration-table-mono = convert to mono
duration-table-component = largest component
duration-table-interior = extracte Sudoku
duration-table-hough = Hough transformation
duration-table-ocr = OCR
duration-table-fix = fix errors
duration-table-all = overall time

thanks = This app wouldn't have been possible without many programmers who share their code and algorithms freely with others:
thanks-list.innerHTML = <ul><li>Bojan Banko explained on the page <a target="_blank" href="http://www.codeproject.com/Articles/238114/Realtime-Webcam-Sudoku-Solver">Realtime Webcam Sudoku Solver</a> as well as Chris on <a target="_blank" href="http://sudokugrab.blogspot.de/2009/07/how-does-it-all-work.html">iPhone Sudoku Grab – How does it all work?</a> many usefull things about the general procedure.</li><li>Jenny Louthan published on <a target="_blank" href="https://github.com/jlouthan/perspective-transform">Github</a> under the <a target="_blank" href="https://github.com/jlouthan/perspective-transform/blob/master/LICENSE">MIT license</a> the code which is used to transform the image.</li><li>Greg Hewgill published on the page <a target="_blank" href="http://hewgill.com/sudoku/">Sudoku Solver</a> under the MIT license an implementation of Knuth’s algorithm to solve Sudokus which is used in this app.</li><li>Fabien Cazenave published on <a target="_blank" href="https://github.com/fabi1cazenave/webL10n">Github</a> the code that is used for internationalization.</li><!--<li>(name) translated the app into (language).</li>--></ul>
# When you translate the app, feel free to add your name to the *translated* string as suggested above
free-software.innerHTML = This app is free software, its source can be obtained on <a target="_blank" href="https://github.com/Schnark/sudoku">Github</a>. There you also find the exact conditions under which you are allowed to reuse this software. This software is provided 'as-is', without any express or implied warranty.
developer-mode = The developer mode allows you to recreate the training data for the recognition of the numbers. It also includes a test image allowing you to test the app when you don't have a Sudoku at hand. This image, by the way, is what makes this app so large, its size is more than twice the size of the rest.
error = An error occurred while trying to get an image from the camera!
explain-camera = Try to take a clear and complete image of the Sudoku, without much other stuff around it.
explain-photo = The selected image above should be a clear and complete image of the Sudoku, without much other stuff around it.
debug-img = First, the image is taken. The green grid, which should coincide with the Sudoku’s grid, is added in a later step.
debug-bw = The color image is first transformed into grayscale, and then black and white. For this not a global threshold is used, instead a pixel is set to black if it’s darker than the average of the pixels in its neighborhood.
debug-grid = The image is blurred a bit (to connect structures with accidental gaps), then split into its components. The biggest of these (those with the most pixels) is kept, all others are removed. This should be the grid of the Sudoku.
debug-sudoku = From the original image the Sudoku is extracted, the grid from the previous step shows where it is. Using a Hough transformation the lines of the grid a determined. First, the ten best lines for both horizontal and vertical direction are chosen, from these the distance and position of the actual lines is derived, and in their neighborhood the final lines are chosen. These are drawn in the above image.
debug-table = Each of the 81 cells of the Sudoku is transformed to a square, the grid is removed, so only the digit or an empty cell remains. To recognize them the second and third normalized central moments are calculated (the table shows the value times 1000). These are invariant with respect to translation and scaling and distinguish the digits well enough. The calculated values are compared with a static list for the nine digits, the entry with the smallest distance (calculated as Mahalanobis distance) is selected. This static list as well as the matrix for the distance was generated from training with many Sudokus.
debug-train = You can recreate these data by correcting all wrong values in the table (note that you will have to correct them again in the next step) and repeating this with many more Sudokus.
debug-table-img = Image
debug-result = The digits are inserted at their place in the Sudoku. If this causes a contradiction it is solved by replacing one of the contradicting digits by the next best match.
edit-camera = Please check the Sudoku for recognition mistakes and fix them if necessary.
edit-start = Please enter the Sudoku.