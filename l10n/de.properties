title = Sudoku-Löser

solution-0 = Unlösbar!
solution-1 = Lösung
solution-2 = Lösung (nicht eindeutig)

no-training-data = Noch keine Trainingsdaten vorhanden
train-add = Daten zum Training verwenden

page-start = Sudoku-Löser
page-training = Trainingsdaten
page-error = Fehler
page-camera = Aufnahme
page-debug = Erkennungsvorgang
page-edit = Bearbeiten

button-edit = Mit leerem Sudoku starten
button-retry = Vorheriges Sudoku neu laden
button-camera = Sudoku mit Kamera aufnehmen
button-photo = Sudoku auf Bild erkennen
button-test-image = Testbild verwenden
button-training = Trainingsdaten anzeigen
button-debug-on = Im Entwickler-Modus starten
button-debug-off = Im normalen Modus starten
button-training-clear = Daten zurücksetzen
button-training-done = Fertig
button-error-done = OK
button-ocr = Sudoku erkennen
button-debug = Sudoku mit Erklärung der einzelnen Schritte erkennen
button-debug-done = Weiter
button-solve = Lösen

thanks = Diese App wäre nicht möglich ohne zahlreiche Programmierer, die ihren Code und ihre Algorithmen frei mit anderen teilen:
thanks-list.innerHTML = <ul><li>Bojan Banko hat auf der Seite <a target="_blank" href="http://www.codeproject.com/Articles/238114/Realtime-Webcam-Sudoku-Solver">Realtime Webcam Sudoku Solver</a> ebenso wie Chris auf <a target="_blank" href="http://sudokugrab.blogspot.de/2009/07/how-does-it-all-work.html">iPhone Sudoku Grab – How does it all work?</a> viele nützliche Hinweise zum allgemeinen Vorgehen erklärt.</li><li>Jenny Louthan hat auf <a target="_blank" href="https://github.com/jlouthan/perspective-transform">Github</a> unter der <a target="_blank" href="https://github.com/jlouthan/perspective-transform/blob/master/LICENSE">MIT-Lizenz</a> den Code zur Verfügung gestellt, der bei der Bildtransformation zum Einsatz kommt.</li><li>Greg Hewgill hat auf der Seite <a target="_blank" href="http://hewgill.com/sudoku/">Sudoku Solver</a> unter der MIT-Lizenz eine Implementierung von Knuths Lösungsalgorithmus für Sudokus veröffentlicht, die zum Einsatz kommt.</li><li>Fabien Cazenave hat auf <a target="_blank" href="https://github.com/fabi1cazenave/webL10n">Github</a> den Code veröffentlicht, der für die Internationalisierung eingesetzt wird.</li></ul>
free-software.innerHTML = Diese App ist freie Software, ihr Quellcode kann auf <a target="_blank" href="https://github.com/Schnark/sudoku">Github</a> heruntergeladen werden. Dort finden sich auch die genauen Bedingungen, unter denen die Software weiterverwendet werden darf. Diese Software wird ohne ausdrückliche oder implizierte Garantie bereitgestellt.
error = Leider trat ein Fehler auf beim Versuch ein Bild von der Kamera zu bekommen!
explain-camera = Versuche ein möglichst kontrastreiches und vollständiges Bild vom Sudoku machen, ohne viele andere Dinge außenherum.
explain-photo = Das oben ausgewählte Bild sollte ein möglichst kontrastreiches und vollständiges Bild vom Sudoku sein, ohne viele andere Dinge außenherum.
debug-img = Zuerst wird das Bild aufgenommen. Das grüne Gitter, das mit dem des Sudokus übereinstimmen sollte, wird erst in einem späteren Schritt hinzugefügt.
debug-bw = Das Farbbild wird zunächst in ein Graustufen-Bild und dann in ein Schwarz-Weiß-Bild umgewandelt. Dabei wird kein globaler Schwellenwert verwendet, stattdessen wird ein Pixel schwarz gefärbt, wenn es dunkler ist als der Durchschnitt der Pixel in seiner Umgebung.
debug-grid = Das Bild wird ein bisschen verwischt (damit sich versehentlich getrennte Strukturen wieder verbinden) und anschließend in seine Zusammenhangskomponenten zerlegt. Die größte von diesen (die mit den meisten Pixeln) wird beibehalten, alle anderen werden entfernt. Diese sollte das Gitter des Sudokus sein.
debug-sudoku = Aus dem ursprünglichen Bild wird das Sudoku extrahiert, wobei das Gitter aus dem vorherigen Schritt die Lage bestimmt. Über eine Hough-Transformation werden die Gitterlinien gesucht. Dazu werden zunächst die je zehn besten ungefähr horizontalen und vertikalen Geraden ausgewählt, daraus der Abstand und die Lage der Gitterlinien bestimmt, und in der Umgebung der erwarteten Positionen erneut gesucht. Die gefundenen Gitterlinien sind oben eingezeichnet.
debug-table = Die 81 Sudoku-Felder werden einzeln durch eine perspektivische Transformation zu Quadraten entzerrt, der Rand entfernt, sodass nur die Ziffer oder ein leeres Kästchen übrig bleibt. Um die Ziffern zu erkennen werden die zweiten und dritten normierte zentrale Momente bestimmt (in der Tabelle ist jeweils der 1000-fache Wert angegeben). Diese sind invariant unter Verschiebung und Skalierung und unterscheiden die einzelnen Ziffern hinreichend gut. Die ermittelten Werte werden mit einer statischen Liste mit den Einträgen für die neun Ziffern verglichen, der Eintrag mit der kleinsten Abweichung (im Sinne des Mahalanobis-Abstands) wird ausgewählt. Diese statische Liste wurde ebenso wie die Matrix für den Abstand über eine große Zahl von Trainings-Daten gewonnen.
debug-train = Du kannst diese Daten selbst erzeugen, indem du alle Fehler in der Tabelle korrigierst (beachte, dass du sie im nächsten Schritt nochmals korrigieren musst) und diesen Vorgang mit vielen weiteren Sudokus wiederholst.
debug-table-img = Bild
debug-result = Die ermittelten Zahlen werden dann an die entsprechende Stelle im Sudoku eingetragen. Sollte sich dabei ein Widerspruch ergeben, wird dieser aufgelöst, indem eine der beiden erkannten Ziffern durch den nächst besten Treffer ersetzt wird.
edit-camera = Bitte prüfe das Sudoku auf Erkennungsfehler und korrigiere sie gegebenenfalls.
edit-start = Hier kannst du das Sudoku eingeben.